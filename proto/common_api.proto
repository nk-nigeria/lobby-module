// Copyright 2020 The Nakama Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// The realtime protocol for the template match engine.
package api;

option go_package = "github.com/ciaolink-game-platform/cgp-common-module/api";

message Game {
  string code = 1;
  bool active = 2;
  string lobby_id = 3;
  Layout layout = 4;
}

message Layout {
  int32 col = 1;
  int32 row = 2;
  int32 col_span = 3;
  int32 row_span = 4;
}

message GameListResponse {
  repeated Game games = 1;
}

message BetListRequest {
  string code = 1;
}

message BetListResponse {
  repeated int32 bets = 1;
}

enum TypeChat {
  TYPE_CHAT_UNSPECIFIED = 0;
  TYPE_CHAT_ROOM = 1;
  TYPE_CHAT_DIRECTMSG = 2;
  TYPE_CHAT_GROUUP = 3;
}

message Chat {
  TypeChat type_chat = 1;
  string id = 2;
  string content = 3;
}

message FreeChip {
  int64 id = 1;
  string sender_id = 2;
  string recipient_id = 3;
  string title = 4;
  string content = 5;
  int64 chips = 6;
  bool claimable = 7;
}

message FreeChipRequest {
  string user_id = 1;
  int64 limit = 2;
  string cusor = 3;
}

message ListFreeChip {
  repeated FreeChip freechips = 1;
  string next_cusor = 2;
  string prev_cusor = 3;
  int64 total = 4;
  int64 offset = 5;
  int64 limit = 6;
}

message Deal {
  string id = 1;
  int64 chips = 2;
  int64 amount_chips = 3;
  int64 bonus = 4;
  string price = 5;
  string name = 6;
  string currency = 7;
  string percent = 8;
  int64 chip_per_unit = 9;
}

message DealInShop {
  Deal best = 1;
  repeated Deal iaps = 2;
  repeated Deal gcashes = 3;
  repeated Deal sms = 4;
}

message LeaderBoardRecord {
  string game_code = 1;
  string user_id = 2;
  int64 score = 3;
}

enum ExchangeStatus {
  EXCHANGE_STATUS_UNSPECIFIED = 0;
  EXCHANGE_STATUS_WAITING = 1;
  EXCHANGE_STATUS_CANCEL_BY_USER = 2;
  EXCHANGE_STATUS_PENDING = 3;
  EXCHANGE_STATUS_DONE = 4;
  EXCHANGE_STATUS_REJECT = 5;
}

message ExchangeInfo {
  string id = 1;
  string id_deal = 2;
  int64 chips = 3;
  string price = 4;
  int64 status = 5;
  int32 unlock = 6;
  string cash_id = 7;
  string cash_type = 8;
  string user_id_request = 9;
  string user_name_request = 10;
  int64 vip_lv = 11;
  string device_id = 12;
  string user_id_handling = 13;
  string user_name_handling = 14;
  string reason = 15;
  string cursor = 16;
  int64 createTime = 17;
}

message ExchangeDealInShop {
  repeated Deal gcashes = 1;
}

message ListExchangeInfo {
  repeated ExchangeInfo exchange_infos = 1;
  string next_cusor = 2;
  string prev_cusor = 3;
  int64 total = 4;
  int64 offset = 5;
  int64 limit = 6;
  int64 from = 7;
  int64 to = 8;
}

message ExchangeRequest {
  string id = 1;
  string user_id_request = 2;
  int64 limit = 3;
  int64 from = 4;
  int64 to = 5;
  string cusor = 6;
  string cash_type = 9;
}

message Reward {
  int64 basic_chip = 1;
  float percent_bonus = 2;
  int64 bonus_chip = 3;
  int64 online_chip = 4;
  int64 total_chip = 5;
  int64 streak = 6;
  int64 online_sec = 7;
  bool can_claim = 8;
  int64 num_claim = 9;
  int64 last_claim_unix = 10;
  int64 next_claim_unix = 11;
  int64 next_claim_sec = 12;
  bool reach_max_streak = 13;
  int64 last_spin_number = 14;
  int64 last_online_unix = 15;
}

message RewardTemplate {
  repeated int64 basic_chips = 1;
  float percen_bonus = 2;
  int64 online_sec = 3;
  int64 online_chip = 4;
  int64 streak = 5;
}

message LastClaimReward {
  int64 last_claim_unix = 1;
  int64 next_claim_unix = 2;
  int64 streak = 3;
  int64 last_spin_number = 4;
  bool reach_max_streak = 5;
  int64 num_claim = 6;
}

message DailyRewardTemplate {
  repeated RewardTemplate reward_templates = 1;
}

message UserGroup {
  int64 id = 1;
  string name = 2;
  string type = 3;
  string data = 4;
}

message ListUserGroup {
  repeated UserGroup user_groups = 1;
  string next_cusor = 2;
  string prev_cusor = 3;
  int64 total = 4;
  int64 offset = 5;
  int64 limit = 6;
}

message UserGroupRequest {
  int64 limit = 1;
  string cusor = 2;
}

enum GiftCodeType {
  GIFT_CODE_TYPE_UNSPECIFIED = 0;
  GIFT_CODE_TYPE_GAME = 1;
}

message GiftCode {
  int64 id = 1;
  string code = 2;
  int64 n_current = 3;
  int64 n_max = 4;
  int64 value = 5;
  int64 start_time_unix = 6;
  int64 end_time_unix = 7;
  string message = 8;
  int64 vip = 9;
  GiftCodeType gift_code_type = 10;  
  bool reach_max_claim = 12;
  bool already_claim = 13;
  string user_id = 14;
  bool open_to_claim = 15;
}

message ListGiftCode {
  repeated GiftCode gift_codes = 1;
}

enum TypeNotification {
  RESERVED = 0;
  MAIL_BOX = 1;
}

message AddNotificationRequest {
  repeated string recipient_ids = 1;
  int64 user_group_id = 2;
  TypeNotification type = 3;
  string title = 4;
  string content = 5;
  string sender_id = 6;
}

message Notification {
  int64 id = 1;
  string recipient_id = 2;
  TypeNotification type = 3;
  string title = 4;
  string content = 5;
  string sender_id = 6;
  bool read = 7;
}

message NotificationRequest {
  int64 limit = 1;
  string cusor = 2;
  TypeNotification type = 3;
}

message ListNotification {
  repeated Notification notifications = 1;
  string next_cusor = 2;
  string prev_cusor = 3;
  int64 total = 4;
  int64 offset = 5;
  int64 limit = 6;
}

enum TypeInAppMessage {
  HOT_NEWS = 0;
  BANNER = 1;
}

enum InAppMessageAction {
  NONE = 0;
  NAVIGATE = 1;
  OPEN_URL = 2;
}

message InAppMessageData {
  InAppMessageAction action = 1;
  string target = 2;
  map<string, string> params = 3;
}

message InAppMessage {
  int64 id = 1;
  int64 high_priority = 2;
  int64 group_id = 3;
  TypeInAppMessage type = 4;
  InAppMessageData data = 5;
  int64 start_date = 6;
  int64 end_date = 7;
}

message InAppMessageRequest {
  int64 limit = 1;
  string cusor = 2;
  TypeInAppMessage type = 3;
}

message ListInAppMessage {
  repeated InAppMessage in_app_messages = 1;
  string next_cusor = 2;
  string prev_cusor = 3;
  int64 total = 4;
  int64 offset = 5;
  int64 limit = 6;
}
